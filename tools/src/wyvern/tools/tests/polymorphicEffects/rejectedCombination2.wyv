type Generic
  effect E

val q : Generic[{system.FFIRead, system.FFIWrite}] = new
  effect E = {system.FFIRead, system.FFIWrite}

val r : Generic[{system.FFIRead, system.FFIWrite}] = new
  effect E = {}

val s : Generic[{}] = new
  effect E = {}

val t : Generic = new
  effect E = {}

def id[effect E, T](x : T) : {E} T
  x

// {r.E} is actually {}, but is declared to be {system.FFIRead, system.FFIWrite}, so the effect
// checker will reject passing in {r.E} here because {system.FFIRead, system.FFIWrite} is not a
// subset of {s.E} = {}
def run() : {s.E} String
  id[{r.E}]("abc")

run()
